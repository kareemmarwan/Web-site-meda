{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from \"./types\";\nimport setAuthToken from '../utils/setAuthToken'; //Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('http://localhost:5000/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('http://localhost:5000/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('http://localhost:5000/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["D:/hooks/Login system with MARN/Scila/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {setAlert} from './alert'\r\nimport {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT\r\n  } from \"./types\";\r\nimport setAuthToken from '../utils/setAuthToken';\r\n\r\n  //Load User\r\n  export const loadUser = () => async dispatch =>{\r\n      if(localStorage.token) {\r\n        setAuthToken(localStorage.token);\r\n      }\r\n      try {\r\n          const res = await axios.get('http://localhost:5000/api/auth');\r\n          dispatch({\r\n              type: USER_LOADED,\r\n              payload:res.data\r\n          });\r\n      } catch (err) {\r\n          dispatch({\r\n              type: AUTH_ERROR\r\n          });\r\n          \r\n      }\r\n  }\r\n  // Register User\r\n  export const register = ({ name, email , password})=> async dispatch=>{\r\n      const config = {\r\n          headers: {\r\n              'Content-Type':'application/json'\r\n          }\r\n      };\r\n\r\n      const body = JSON.stringify({name , email , password});\r\n      try {\r\n          const res = await axios.post('http://localhost:5000/api/users',body,config);\r\n          dispatch({\r\n              type:REGISTER_SUCCESS,\r\n              payload: res.data\r\n          });\r\n\r\n          dispatch(loadUser());\r\n\r\n      } catch (err) {\r\n        const errors = err.response.data.errors;\r\n        if(errors){\r\n            errors.forEach(error=> dispatch(setAlert(error.msg,'danger')));\r\n        }\r\n        dispatch({\r\n            type:REGISTER_FAIL\r\n        });\r\n          \r\n      }\r\n  };\r\n\r\n  // Login User\r\n  export const login = (email , password)=> async dispatch=>{\r\n    const config = {\r\n        headers: {\r\n            'Content-Type':'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({email , password});\r\n    try {\r\n        const res = await axios.post('http://localhost:5000/api/auth',body,config);\r\n        dispatch({\r\n            type:LOGIN_SUCCESS,\r\n            payload: res.data\r\n        });\r\n\r\n        dispatch(loadUser());\r\n    } catch (err) {\r\n      const errors = err.response.data.errors;\r\n      if(errors){\r\n        errors.forEach(error=> dispatch(setAlert(error.msg,'danger')));\r\n      }\r\n      dispatch({\r\n          type:LOGIN_FAIL\r\n      });\r\n        \r\n    }\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}